// <auto-generated />
using System;
using CarServiceApp.Domain.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarServiceApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceCustomSpart", b =>
                {
                    b.Property<string>("PartId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("PartId");

                    b.Property<int>("AcceptanceId")
                        .HasColumnType("int")
                        .HasColumnName("AcceptanceId");

                    b.Property<double?>("Number")
                        .HasColumnType("float");

                    b.Property<string>("StateSpart")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StateSpart");

                    b.HasKey("PartId", "AcceptanceId")
                        .HasName("XPKAcceptanceCustomSParts");

                    b.HasIndex("AcceptanceId");

                    b.ToTable("AcceptanceCustomSpart", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceDocument", b =>
                {
                    b.Property<int>("AcceptanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AcceptanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcceptanceId"));

                    b.Property<DateTime?>("AcceptDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ClientId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ClientId");

                    b.Property<int>("PersonnelNumber")
                        .HasColumnType("int");

                    b.HasKey("AcceptanceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PersonnelNumber");

                    b.ToTable("AcceptDocument", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceInvoice", b =>
                {
                    b.Property<long>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PositionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PositionId"));

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Number")
                        .HasColumnType("float");

                    b.Property<string>("PartId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("PartId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<byte?>("TradeIncrease")
                        .HasColumnType("tinyint")
                        .HasColumnName("TradeIncrease");

                    b.HasKey("PositionId")
                        .HasName("XPKInvoice");

                    b.HasIndex("LotNumber");

                    b.HasIndex("PartId");

                    b.ToTable("AcceptanceInvoice", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Car", b =>
                {
                    b.Property<string>("VinNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("VinNumber");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorId");

                    b.Property<string>("DataSheetCar")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("IssueYear")
                        .HasColumnType("int");

                    b.Property<int?>("ModificationId")
                        .HasColumnType("int")
                        .HasColumnName("ModificationId");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegistrationNumber");

                    b.Property<string>("TransmissionType")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<byte[]>("ViewCar")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("VinNumber")
                        .HasName("XPKCar");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModificationId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarBrand", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("BrandName");

                    b.Property<byte[]>("ViewBrand")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ViewBrand");

                    b.HasKey("Id")
                        .HasName("PK__CarBrands");

                    b.ToTable("CarBrand", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarColor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ColorId");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Description");

                    b.Property<string>("Hex")
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)")
                        .HasColumnName("Hex")
                        .IsFixedLength();

                    b.Property<bool>("IsMetallic")
                        .HasColumnType("bit")
                        .HasColumnName("IsMetallic");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK__CarColor_table");

                    b.ToTable("CarColor", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarGeneration", b =>
                {
                    b.Property<int>("GenerationId")
                        .HasColumnType("int")
                        .HasColumnName("GenerationId");

                    b.Property<string>("GenerationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GenerationName");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<int?>("YearBegin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("YearBegin")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("YearEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("YearEnd")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("GenerationId")
                        .HasName("PK___importe__F887D65A7C2A7AF2");

                    b.HasIndex("ModelId");

                    b.ToTable("CarGeneration", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarListFull", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.Property<string>("BrandName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("BrandName");

                    b.Property<string>("GenerationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GenerationName");

                    b.Property<int?>("GenerationYearEnd")
                        .HasColumnType("int")
                        .HasColumnName("GenerationYearEnd");

                    b.Property<int?>("GenerationYearStart")
                        .HasColumnType("int")
                        .HasColumnName("GenerationYearStart");

                    b.Property<string>("Model")
                        .HasMaxLength(274)
                        .HasColumnType("nvarchar(274)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<string>("ModelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ModelName");

                    b.Property<int>("ModificationId")
                        .HasColumnType("int")
                        .HasColumnName("ModificationId");

                    b.Property<string>("ModificationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ModificationName");

                    b.Property<int?>("ModificationYearEnd")
                        .HasColumnType("int")
                        .HasColumnName("ModificationYearEnd");

                    b.Property<int?>("ModificationYearStart")
                        .HasColumnType("int")
                        .HasColumnName("ModificationYearStart");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesId");

                    b.Property<string>("SeriesName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SeriesName");

                    b.ToTable((string)null);

                    b.ToView("CarListFull", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ModelName");

                    b.HasKey("Id")
                        .HasName("PK__CarModels");

                    b.HasIndex("BrandId");

                    b.ToTable("CarModel", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModification", b =>
                {
                    b.Property<int>("ModificationId")
                        .HasColumnType("int")
                        .HasColumnName("ModificationId");

                    b.Property<int?>("EndProductionYear")
                        .HasColumnType("int")
                        .HasColumnName("EndProductionYear");

                    b.Property<string>("ModificationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ModificationName");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesId");

                    b.Property<int?>("StartProductionYear")
                        .HasColumnType("int")
                        .HasColumnName("StartProductionYear");

                    b.HasKey("ModificationId")
                        .HasName("PK__CarModification");

                    b.HasIndex("SeriesId");

                    b.ToTable("CarModification", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarSeries", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("SeriesId");

                    b.Property<int?>("GenerationId")
                        .HasColumnType("int")
                        .HasColumnName("GenerationId");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SeriesName");

                    b.HasKey("Id")
                        .HasName("PK__CarSeries");

                    b.HasIndex("GenerationId");

                    b.HasIndex("ModelId");

                    b.ToTable("CarSeries", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ClientId");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("DateBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpirationDateLicense")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("NumberDriveLicense")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("ClientId")
                        .HasName("XPKClient");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ContractToEmployee", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<DateOnly?>("DismissDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RecruitDate")
                        .HasColumnType("date");

                    b.Property<int?>("Term")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("nchar(40)")
                        .IsFixedLength();

                    b.HasKey("ContractId");

                    b.HasIndex("PersonnelNumber");

                    b.ToTable("ContractToEmployee", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChiefPersonalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("DepartmentName");

                    b.HasKey("Id")
                        .HasName("XPKDepartment");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Employee", b =>
                {
                    b.Property<int>("PersonnelNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelNumber"));

                    b.Property<DateOnly?>("DateBirthday")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PassportIssuedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PassportIssuedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<string>("PassportPrivateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("PassportValidityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostId");

                    b.Property<string>("ResidentialAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("PersonnelNumber")
                        .HasName("XPKEmployee");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PostId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ExecutingService", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceId");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderId");

                    b.Property<DateTime?>("DateCompleting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<double?>("TakeTime")
                        .HasColumnType("float");

                    b.Property<int?>("TaxAddedValue")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "OrderId")
                        .HasName("XPKExecutingServices");

                    b.HasIndex("OrderId");

                    b.HasIndex("PersonnelNumber");

                    b.ToTable("ExecutingService");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.FullStockOfSparePart", b =>
                {
                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<DateOnly?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("Manufacture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double?>("Number")
                        .HasColumnType("float");

                    b.Property<string>("PartId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("PartId");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("PositionId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<double?>("Stock")
                        .HasColumnType("float");

                    b.Property<double?>("StockPercent")
                        .HasColumnType("float");

                    b.Property<byte?>("TradeIncrease")
                        .HasColumnType("tinyint")
                        .HasColumnName("TradeIncrease");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable((string)null);

                    b.ToView("FullStockOfSpareParts", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.GeneratedClient", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ClientId")
                        .HasName("PK__GeneratedClients");

                    b.ToTable("GeneratedClient", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ImportedStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ImportedStreet", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Invoice", b =>
                {
                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProviderId");

                    b.HasKey("LotNumber");

                    b.HasIndex("PersonnelNumber");

                    b.HasIndex("ProviderId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.OrderService", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderId");

                    b.Property<string>("ClientId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ClientId");

                    b.Property<int?>("CurrentMileageCar")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCompleting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFactCompleting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateMakingOrder")
                        .HasColumnType("datetime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FuelLevelPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)50);

                    b.Property<bool?>("IsAntenna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsCoverDecorEngine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsSpareWheel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsTuner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte?>("NumberWheelCaps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte?>("NumberWipers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte?>("NumberWipersArms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentId");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VinNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("VinNumber");

                    b.HasKey("OrderId")
                        .HasName("XPKOrderServ");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("VinNumber");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NamePost");

                    b.HasKey("Id")
                        .HasName("XPKPost");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.PreRecord", b =>
                {
                    b.Property<long>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RecordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecordId"));

                    b.Property<DateTime>("DateMakingRecord")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsRejection")
                        .HasColumnType("bit");

                    b.Property<int>("IssueYear")
                        .HasColumnType("int");

                    b.Property<string>("MarkModelCar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("RegNumberCar")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RecordId");

                    b.HasIndex("PersonnelNumber");

                    b.ToTable("PreRecord", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.PreRecordService", b =>
                {
                    b.Property<long>("RecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("RecordId");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceId");

                    b.Property<DateTime?>("DateReservation")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.HasKey("RecordId", "ServiceId");

                    b.HasIndex("PersonnelNumber");

                    b.HasIndex("ServiceId");

                    b.ToTable("PreRecordService");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Provider", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProviderId");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("XPKProvider");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.RemarkToStateCar", b =>
                {
                    b.Property<int>("RemarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RemarkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RemarkId"));

                    b.Property<byte?>("NumberType")
                        .HasColumnType("tinyint");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderId");

                    b.Property<string>("RemarkText")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("XAxisPos")
                        .HasColumnType("int")
                        .HasColumnName("XAxisPos");

                    b.Property<int>("YAxisPos")
                        .HasColumnType("int")
                        .HasColumnName("YAxisPos");

                    b.HasKey("RemarkId");

                    b.HasIndex("OrderId");

                    b.ToTable("RemarkToStateCar", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceId");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ServiceName");

                    b.Property<decimal?>("PriceHour")
                        .HasColumnType("money");

                    b.Property<double?>("RateTime")
                        .HasColumnType("float");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("Id")
                        .HasName("XPKService");

                    b.HasIndex("TypeId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeName");

                    b.HasKey("Id")
                        .HasName("XPKServiceType");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.SparePartMaterial", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("PartId");

                    b.Property<string>("Manufacture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("XPKSparePartMaterial");

                    b.ToTable("SparePartMaterial", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.TypeOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("PaymentId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PaymentName");

                    b.HasKey("Id")
                        .HasName("XPKTypeOfPayment");

                    b.ToTable("TypeOfPayment", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.UsingCustomSpartMat", b =>
                {
                    b.Property<int>("AcceptanceId")
                        .HasColumnType("int")
                        .HasColumnName("AcceptanceId");

                    b.Property<string>("PartId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("PartId");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceId");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderId");

                    b.Property<double?>("Number")
                        .HasColumnType("float");

                    b.HasKey("AcceptanceId", "PartId", "ServiceId", "OrderId");

                    b.HasIndex("PartId", "AcceptanceId");

                    b.HasIndex("ServiceId", "OrderId");

                    b.ToTable("UsingCustomSpartMat", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.UsingPartMaterial", b =>
                {
                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("PositionId");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceId");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderId");

                    b.Property<decimal?>("CostPart")
                        .HasColumnType("money")
                        .HasColumnName("CostPart");

                    b.Property<double?>("Number")
                        .HasColumnType("float");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.HasKey("PositionId", "ServiceId", "OrderId");

                    b.HasIndex("PersonnelNumber");

                    b.HasIndex("ServiceId", "OrderId");

                    b.ToTable("UsingPartMaterial", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServiceTypePostEmployee", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostId");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("PostId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("ServiceTypePostEmployee", (string)null);
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceCustomSpart", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.AcceptanceDocument", "AcceptDocument")
                        .WithMany("AcceptanceCustomSparts")
                        .HasForeignKey("AcceptanceId")
                        .IsRequired()
                        .HasConstraintName("Incl");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.SparePartMaterial", "SparePartMaterial")
                        .WithMany("AcceptanceCustomSparts")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("Fixed");

                    b.Navigation("AcceptDocument");

                    b.Navigation("SparePartMaterial");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceDocument", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Client", "Client")
                        .WithMany("AcceptanceDocuments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("BringParts");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("AcceptanceDocuments")
                        .HasForeignKey("PersonnelNumber")
                        .IsRequired()
                        .HasConstraintName("Accept");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceInvoice", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Invoice", "Invoice")
                        .WithMany("AcceptanceInvoices")
                        .HasForeignKey("LotNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IncludePart");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.SparePartMaterial", "SparePartMaterial")
                        .WithMany("AcceptanceInvoices")
                        .HasForeignKey("PartId")
                        .HasConstraintName("Fixed_in");

                    b.Navigation("Invoice");

                    b.Navigation("SparePartMaterial");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Car", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarColor", "CarColor")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Car__CarColor");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarModification", "CarModification")
                        .WithMany("Cars")
                        .HasForeignKey("ModificationId")
                        .HasConstraintName("FK_Car__CarModification");

                    b.Navigation("CarColor");

                    b.Navigation("CarModification");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarGeneration", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarModel", "CarModel")
                        .WithMany("CarGenerations")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK__CarGeneration__CarModels");

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModel", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarBrand", "CarBrand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_CarModels_CarBrands");

                    b.Navigation("CarBrand");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModification", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarSeries", "Series")
                        .WithMany("CarModifications")
                        .HasForeignKey("SeriesId")
                        .IsRequired()
                        .HasConstraintName("FK__CarModification__CarSeries");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarSeries", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarGeneration", "CarGeneration")
                        .WithMany("CarSeries")
                        .HasForeignKey("GenerationId")
                        .HasConstraintName("FK__CarSeries__CarGeneration");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.CarModel", "CarModel")
                        .WithMany("CarSeries")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK__CarSeries__CarModels");

                    b.Navigation("CarGeneration");

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ContractToEmployee", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("ContractToEmployees")
                        .HasForeignKey("PersonnelNumber")
                        .IsRequired()
                        .HasConstraintName("Worked_by");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Employee", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("Has");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Belongs");

                    b.Navigation("Department");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ExecutingService", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.OrderService", "OrderService")
                        .WithMany("ExecutingServices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Registr_in");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("ExecutingServices")
                        .HasForeignKey("PersonnelNumber")
                        .HasConstraintName("Executes");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Service", "Service")
                        .WithMany("ExecutingServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("Contents_in");

                    b.Navigation("Employee");

                    b.Navigation("OrderService");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Invoice", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("PersonnelNumber")
                        .HasConstraintName("Take_in");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Provider", "Provider")
                        .WithMany("Invoices")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("Deliver");

                    b.Navigation("Employee");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.OrderService", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Client", "Client")
                        .WithMany("OrderServices")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_OrderService_Client");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.TypeOfPayment", "TypeOfPayment")
                        .WithMany("OrderServices")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_OrderService_TypeOfPayment");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Car", "Car")
                        .WithMany("OrderServices")
                        .HasForeignKey("VinNumber")
                        .HasConstraintName("FK_OrderServ_Car");

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("TypeOfPayment");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.PreRecord", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("PreRecords")
                        .HasForeignKey("PersonnelNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Record");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.PreRecordService", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("PreRecordServices")
                        .HasForeignKey("PersonnelNumber")
                        .HasConstraintName("PreExec");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.PreRecord", "PreRecord")
                        .WithMany("PreRecordServices")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("HasServ");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.Service", "Service")
                        .WithMany("PreRecordServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("BelongsPreRecord");

                    b.Navigation("Employee");

                    b.Navigation("PreRecord");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.RemarkToStateCar", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.OrderService", "OrderService")
                        .WithMany("RemarkToStateCars")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_RemarkToStateCar_OrderServ");

                    b.Navigation("OrderService");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Service", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Service_ServiceType");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.UsingCustomSpartMat", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.AcceptanceCustomSpart", "AcceptanceCustomSpart")
                        .WithMany("UsingCustomSpartMats")
                        .HasForeignKey("PartId", "AcceptanceId")
                        .IsRequired()
                        .HasConstraintName("Use_in2");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.ExecutingService", "ExecutingService")
                        .WithMany("UsingCustomSpartMats")
                        .HasForeignKey("ServiceId", "OrderId")
                        .IsRequired()
                        .HasConstraintName("Apply_to2");

                    b.Navigation("AcceptanceCustomSpart");

                    b.Navigation("ExecutingService");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.UsingPartMaterial", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Employee", "Employee")
                        .WithMany("UsingPartMaterials")
                        .HasForeignKey("PersonnelNumber")
                        .HasConstraintName("Accept_to_Work");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.AcceptanceInvoice", "AcceptanceInvoice")
                        .WithMany("UsingPartMaterials")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("Use_parts");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.ExecutingService", "ExecutingService")
                        .WithMany("UsingPartMaterials")
                        .HasForeignKey("ServiceId", "OrderId")
                        .IsRequired()
                        .HasConstraintName("Apply_to");

                    b.Navigation("AcceptanceInvoice");

                    b.Navigation("Employee");

                    b.Navigation("ExecutingService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTypePostEmployee", b =>
                {
                    b.HasOne("CarServiceApp.Domain.Entity.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceTypePostEmployee_Post");

                    b.HasOne("CarServiceApp.Domain.Entity.Models.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceTypePostEmployee_ServiceType");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceCustomSpart", b =>
                {
                    b.Navigation("UsingCustomSpartMats");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceDocument", b =>
                {
                    b.Navigation("AcceptanceCustomSparts");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.AcceptanceInvoice", b =>
                {
                    b.Navigation("UsingPartMaterials");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Car", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarBrand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarColor", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarGeneration", b =>
                {
                    b.Navigation("CarSeries");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModel", b =>
                {
                    b.Navigation("CarGenerations");

                    b.Navigation("CarSeries");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarModification", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.CarSeries", b =>
                {
                    b.Navigation("CarModifications");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Client", b =>
                {
                    b.Navigation("AcceptanceDocuments");

                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Employee", b =>
                {
                    b.Navigation("AcceptanceDocuments");

                    b.Navigation("ContractToEmployees");

                    b.Navigation("ExecutingServices");

                    b.Navigation("Invoices");

                    b.Navigation("PreRecordServices");

                    b.Navigation("PreRecords");

                    b.Navigation("UsingPartMaterials");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ExecutingService", b =>
                {
                    b.Navigation("UsingCustomSpartMats");

                    b.Navigation("UsingPartMaterials");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Invoice", b =>
                {
                    b.Navigation("AcceptanceInvoices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.OrderService", b =>
                {
                    b.Navigation("ExecutingServices");

                    b.Navigation("RemarkToStateCars");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.PreRecord", b =>
                {
                    b.Navigation("PreRecordServices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Provider", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.Service", b =>
                {
                    b.Navigation("ExecutingServices");

                    b.Navigation("PreRecordServices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.SparePartMaterial", b =>
                {
                    b.Navigation("AcceptanceCustomSparts");

                    b.Navigation("AcceptanceInvoices");
                });

            modelBuilder.Entity("CarServiceApp.Domain.Entity.Models.TypeOfPayment", b =>
                {
                    b.Navigation("OrderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
