@using CarServiceApp.Domain.Common
@using CarServiceApp.Helper
@using CarServiceApp.Domain.Entity.Models
@using CarServiceApp.Domain.Extension
@using CarServiceApp.Domain.Repository
@using CarServiceApp.Domain.Service
@using CarServiceApp.Domain.Model

@model CarServiceApp.Models.SearchParmsContractViewModel


@{
    ViewBag.Title = "Поиск контракта";
    Layout = "_DefaultLayout";
}

<div class="header-page">Поиск трудовых договоров сотрудников</div>
<div class="col-md-12 bs-callout bs-callout-info">
    <form class="row g-3" style="padding-bottom: 10px;" id="ajaxForm" method="post" action="@Url.Action("Search", "Contract")">
        @Html.ValidationSummary()
        @Html.AntiForgeryToken()
        <div class="col-md-1">
            <input asp-for="ContractId" class="form-control" placeholder="номер договора" />
        </div>
        <div class="col-md-2">
            <input asp-for="FullName" class="form-control" placeholder="ФИО сотрудника" />
        </div>
        <div class="col-md-1">
            <input asp-for="ContractType" class="form-control" placeholder="Тип" />
        </div>
        <div class="col-md-1">
            <input asp-for="Term" type="number" class="form-control" placeholder="Срок" />
        </div>
        <div class="col-md-2">
            @*  <label>
            <input class="checkbox" type="checkbox" name="IsRejection" value="">
            <span class="checkbox-custom"></span>
            <span class="label">Просрочен<br>или отказ</span>
            </label> *@
            <div class="form-check">
                <input class="form-check-input" name="IsRejection" type="checkbox" asp-for="IsOn">
                <label class="form-check-label">Действующий</label>
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group date" id="dtPick_From">
                <input asp-for="DateFrom" type="date" class="form-control" placeholder="От" />
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group date" id="dtPick_Before">
                <input asp-for="DateTo" type="date" class="form-control" placeholder="До" />
            </div>
        </div>
        <div class="col-md-1">
            <button type="submit" class="btn btn-primary">Найти</button>
        </div>
    </form>

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>№ договора</th>
                <th>Сотрудник</th>
                <th>Подписан</th>
                <th>Расторгнут</th>
                <th>Тип</th>
                <th>Срок (лет)</th>
                @*<th></th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var item in (IEnumerable<ContractModel>)Model?.GridItem?.Data)
            {
                <tr>
                    <td>@item.ContractId</td>
                    <td><a href='@Url.Action("ShowDetails", "Employee", new { @PersonnelNumber=item.PersonnelNumber})'>@item.FullName</a> </td>
                    <td>
                        <span class="badge rounded-pill bg-secondary">
                            @(item.RecruitDate != null ? item.RecruitDate.ToString("dd MMMM yyyy") : "")
                        </span>
                    </td>
                    <td>
                        <span class="badge @(item.DismissDate.HasValue ? "rounded-pill bg-warning" : "rounded-pill bg-success")">
                            @(!item.DismissDate.HasValue ? "действующий" : item.DismissDate.Value.ToString("dd MMMM yyyy"))
                        </span>
                    </td>
                    <td>
                        <span class="badge rounded-pill bg-info">@item.Type?.Trim()</span>
                    </td>
                    <td>
                        <span class="badge rounded-pill bg-danger">@item.Term</span> (до @item.RecruitDate.AddYears(item?.Term ?? 0).ToString("dd MMMM yyyy"))
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <pager paged-result="@Model.GridItem" page-handler="Search" css-class="pagination"></pager>


</div>
<img id="loading" src="@Url.Content("~/img/loading.gif")" style="display: none; position: absolute; margin: auto; top: 0; bottom: 0; left: 0; right: 0" />
@* @section Script{
    @Scripts.Render("~/Scripts/moment-with-locales.min.js")
    @Scripts.Render("~/Scripts/bootstrap-datetimepicker.min.js")
    @Styles.Render("~/Content/bootstrap-datetimepicker.min.css")
    <script>
        $(document).ready(function () {
            //Инициализация dtPick_From и dtPick_Before
            $(".date").datetimepicker({ language: 'ru', pickTime: false, format: 'YYYY-MM-DD' });
            //При изменении даты в dtPick_From, она устанавливается как минимальная для dtPick_Before
            $("#dtPick_From").on("dp.change", function (e) {
                $("#dtPick_Before").data("DateTimePicker").setMinDate(e.date);
            });
            //При изменении даты в dtPick_Before, она устанавливается как максимальная для dtPick_From
            $("#dtPick_Before").on("dp.change", function (e) {
                $("#dtPick_From").data("DateTimePicker").setMaxDate(e.date);
            });
        })
    </script>
} *@
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>


    $(document).ready(function () {
        //Инициализация dtPick_From и dtPick_Before
        // $(".date").datetimepicker({ language: 'ru', pickTime: false, format: 'YYYY-MM-DD' });
        //При изменении даты в dtPick_From, она устанавливается как минимальная для dtPick_Before
        // $("#dtPick_From").on("dp.change", function (e) {
        //     $("#dtPick_Before").data("DateTimePicker").setMinDate(e.date);
        // });
        // //При изменении даты в dtPick_Before, она устанавливается как максимальная для dtPick_From
        // $("#dtPick_Before").on("dp.change", function (e) {
        //     $("#dtPick_From").data("DateTimePicker").setMaxDate(e.date);
        // });

        // $('#ajaxForm').submit(function (event) {
        //     event.preventDefault();
        //     var form = $(this);
        //     $.ajax({
        //         url: form.attr('action'),
        //         type: form.attr('method'),
        //         data: form.serialize(),
        //         success: function (data) {
        //             $('#results').html(data);
        //             console.log(data);
        //         },
        //         error: function () {
        //             $('#popErorr').show();
        //             console.log('error ----');
        //         }
        //     });
        // });

        // //для пейджинга-сброс номера отсылаемой страницы при изменении строки поиска
        // $('#form-search input').change(function () {
        //     $('#page').attr('value', '')
        // })

        // for checkbox - it should has three state(true, false and indeterminate)
        $('.checkbox').prop("indeterminate", true);
        $('.checkbox').change(function () {
            switch ($(this).attr('value')) {
                case 'true':
                    $(this).prop('checked', true).attr('value', false).prop("indeterminate", false);
                    $('.checkbox-custom').removeClass('checkbox-custom-checked'); break;
                case 'false': $(this).prop("indeterminate", true).attr('value', '');
                    $('.checkbox-custom').removeClass('checkbox-custom-checked'); break;
                case '': $(this).prop('checked', true).attr('value', true).prop("indeterminate", false);
                    $('.checkbox-custom').addClass('checkbox-custom-checked'); break;
            }
        })
    })

</script>